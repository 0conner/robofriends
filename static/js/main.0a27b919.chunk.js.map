{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","change","event","setState","target","value","state","fetch","then","response","json","users","filtered","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAEzB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACC,4BAAKF,GACL,2BAAIC,MCQOK,EAdE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCEpEW,EARC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACC,yBAAKX,UAAU,OAEd,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCI5FI,G,MARF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,YC2CKC,E,kDAxCb,aAAc,IAAD,8BACX,gBAaFC,OAAO,SAACC,GACN,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAbzC,EAAKC,MAAM,CACTxB,OAAO,GACPM,YAAY,IAJH,E,gEAQO,IAAD,OACjBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAQ5B,IAAD,OACEC,EAASC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GACtC,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAEpE,OAA8B,IAA3BF,KAAKP,MAAMxB,OAAOmC,OACb,uCAIL,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,SAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GAlCZM,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0a27b919.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\treturn (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t\r\n\t\t\r\n\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search_robots' onChange={searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', border:'1px solid black',height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      robots:[],\n      searchfield:''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users=>this.setState({robots:users}));\n  }\n\n  change=(event)=>{\n    this.setState({searchfield: event.target.value})\n    \n  }\n\n  render(){\n      const filtered=this.state.robots.filter(robots=>{\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n      })\n     if(this.state.robots.length===0){\n      return <h1>LOADING</h1>\n     } \n     else{\n     return (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.change}/>\n          <Scroll>\n            <Cardlist robots={filtered}/>\n          </Scroll>\n        </div>\n      );   \n      }\n  }\n\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}